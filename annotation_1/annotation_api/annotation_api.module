<?php
// $Id$

//require_once 'element.inc';

/**
 * @file
 *   storage of annotation is managed within this module
 */

/**
 * Implementation of hook_perm().
 */
function annotation_api_perm() {
  return array('administer annotations');
}

/**
 * Implementation of hook_menu().
 */
function annotation_api_menu() {
  $items = array(
    'admin/settings/annotation_api' => array(
      'title' => 'Annotation API Settings',
      'description' => 'Settings for annotation api',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('annotation_api_admin_form'),
      'access arguments' => array('administer annotations'),
      'file' => 'admin.inc',
    ),
    'admin/settings/annotation_api/%/edit' => array(
      'title' => 'Edit Annotation Setting',
      'page arguments' => array('annotation_api_admin_edit_form', 3),
      'access arguments' => array('administer annotations'),
    ),
    'admin/settings/annotation_api/%/delete' => array(
      'title' => 'Delete Annotation Setting',
      //'page callback' => 'drupal_get_form',
      'page arguments' => array('annotation_api_admin_delete_form', 3),
      'access arguments' => array('administer annotations'),
    ),
  );
  return $items;
}


/**
 * Central form for editing annotation
 */
function annotation_form(&$form_state, $annotation) {
  $form = array();
   if (isset($form_state['annotation'])) {
    $annotation = $form_state['annotation'] + (array)$annotation;
  }
  $annotation = (object) $annotation;
  _annotation_prepare_object($annotation);
  foreach (array('aid', 'timestamp', 'uid', 'type', 'scope_type', 'scope_id', 'content_type') as $key) {
    $form[$key] = array(
      '#type' => 'value',
      '#value' => isset($annotation->$key) ? $annotation->$key : NULL,
    );
  }

  $info = annotation_api_info();
  $annotation->settings = array(
    'scope' => $info['scope'][$annotation->scope_type],
    'annotation' => $info['annotation'][$annotation->type],
    'content' => $info['content'][$annotation->content_type],
  );
  $form['#annotation'] = $annotation;
  // Preset vars. Can be changed by annotation plugin.
  $form['vars'] = array('#type' => 'hidden', '#default_value' => $annotation->vars);

  // Single element from content plugin.
  $form['content_id'] = $annotation->settings['content']['form'](&$form_state, $annotation);
  $form['content_id']['#attributes']['class'] .= 'content';
  //$form['#validate'] = array('annotation_form_validate');
  $form['#submit'] = array('annotation_form_submit');
  $form['submit'] = array('#type' => 'submit', '#value' => t('Submit'));

  // Pre form alter for annotation plugin.
  // removed, because in can be handled via hook_form_annotation_form_alter($form, $form_state), so there is also #id tag vailable.
  /**if ($annotation->settings['annotation']['form_alter']) {
    $annotation->settings['annotation']['form_alter']($form, $form_state, $annotation);
  }*/
  return $form;
}

/**
 * Get an annotation form with default values.
 */
function annotation_api_form_default(&$new) {
  $set = variable_get('annotation_api', array());

  if (is_array($new)) {
    $new = (object) $new;
  }
  elseif (!is_object($new)) {
    if ($set[$new]) {
      $new = (object) array('type' => $new);
    }
    else {
      return FALSE;
    }
  }

  $set = (!$set[$new->scope_type]) ? array() : $set[$new->scope_type];

  if (!isset($new->content_type)) {
    if (!$set['default_content']) return FALSE;
    $new->content_type = $set['default_content'];
  }
  if (!isset($new->type)) {
    if (!$set['default_annotation']) return FALSE;
    $new->type = $set['default_annotation'];
  }
  if (!isset($new->vars)) {
    $new->vars = $set['default_vars'];
  }
  return array('#value' => drupal_get_form('annotation_form', $new));
}

/**
 * Prepares annotation object for form.
 */
function _annotation_prepare_object(&$annotation) {
  if (!isset($annotation->uid)) {
    GLOBAl $user;
    $annotation->uid;
  }
}

/**
 * Submit function for annotation form.
 */
function annotation_form_submit($form, &$form_state) {
  if ($form_state['submitted']) {
    $annotation = (object) array(
      'aid' => $form_state['values']['aid'],
      'type' => $form_state['values']['type'],
      'uid' => $form_state['values']['uid'],
      'vars' => $form_state['values']['vars'],
      'scope_type' => $form_state['values']['scope_type'],
      'scope_id' => $form_state['values']['scope_id'],
      'content_type' => $form_state['values']['content_type'],
      'content_id' => $form_state['values']['content_id'],
    );
    $ret = annotation_save($annotation);
    if ($ret) {
      drupal_set_message('Annotation succesfully set!');
    }
  }
}

/**
 * Implementation of hook_views_api().
 */
function annotation_api_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'annotation_api') . '/views',
  );
}

/**
 * Collect information of existing implementations.
 *
 * @param $filter
 *  filters ouput by type
 *  either 'scope', 'content' or 'annotation'
 * @return
 *  array of info definitions
 */
function annotation_api_info($filter = NULL) {
  static $info;
  if (!isset($info)) {
    $info['scope'] = module_invoke_all('annotation_info','scope');
    $info['content'] = module_invoke_all('annotation_info','content');
    $info['annotation'] = module_invoke_all('annotation_info','annotation');
    drupal_alter('annotation_info', $info);
  }
  // Reduce info to a certain type.
  if (isset($filter)) {
    return $info[$filter];
  }
  else {
    return $info;
  }
}

/**
 * Save an annotation
 *
 * @param $annotation
 *  annotation object
 */
function annotation_save($annotation) {
  if (is_array($annotation)) {
    $annotation = (object) $annotation;
  }

  // TODO: add hook_annotationapi('validate')
  // TODO: add hook_annotationapi('presave')

  if ($annotation->is_new || !isset($annotation->aid) || !$annotation->aid) {
    $op = 'insert';
    if (!$annotation->timestamp) $annotation->timestamp = time();
    $ret = drupal_write_record('annotation', $annotation);
  }
  else {
    $op = 'update';
    $ret = drupal_write_record('annotation', $annotation, array('aid'));
  }
  // TODO: add hook_annotationapi($op)
  return $ret;
}

/**
 * Load one or more annotation objects from the database.
 */
function annotation_load($params, $reset = FALSE) {
  static $annotations;
  // Load only one annotation by id
  if (!is_array($params)) {
    $params = array('aid' => $params);
  }

  if ($reset == TRUE || !isset($annotations[serialize($params)])) {
    // Load only one, when aid is given
    if (array_key_exists('aid', $params)) {
      $single = TRUE;
    }
    $query = 'SELECT * FROM {annotation}';
    $where = array();
    $args = array();
    $schema = drupal_get_schema('annotation');
    $int_types = array('serial', 'int');
    foreach ($params as $field => $val) {
      if (isset($schema['fields'][$field])) {
        $where[] = (in_array($schema['fields'][$field]['type'], $int_types)) ? "$field = %d" : "$field = '%s'";
        $args[] = $val;
      }
    }
    if (count($where)) {
      $query .= ' WHERE '. implode(' AND ', $where);
    }

    if ($single) {
      $res = db_query_range($query, $args, 0, 1);
      $return = db_fetch_object($res);
    }
    else {
      $return = array();
      $res = db_query($query, $args);
      while ($obj = db_fetch_object($res)) {
        $return[$obj->aid] = $obj;
      }
    }
    $annotations[serialize($params)] = $return;
  }
  return $annotations[serialize($params)];
}

/**
 * Views an annotation.
 *
 * @param $annotation
 *   object loaded from database, eventually enriched with additional
 *   information.
 * @return
 *   string output for displaying
 */
function annotation_view($annotation) {
  $infos = annotation_api_info('annotation');
  $info = $infos[$annotation->type];
  if ($info['view']) {
    $content = annotation_content_view($annotation);
    return $info['view']($annotation, $content);
  }
  watchdog('annotation', 'Missing view function for annotation type %type', array('%type' => $annotation->type),  WATCHDOG_ERROR, $_GET['q']);
  return FALSE;
}

/**
 * Views the content of an annotation.
 *
 * Will be passed to annotion view function as $content variable.
 *
 * @annotation
 *   annotation object loaded from database, eventually enriched with
 *   additional information
 * @return
 *   string output for implementing into annotation_view functions
 */
function annotation_content_view($annotation) {
  $infos = annotation_api_info('content');
  $info = $infos[$annotation->content_type];
  if ($info['view']) {
    if ($info['load']) {
      $content = $info['load']($annotation->content_id);
    }
    else {
      $content = $annotation->content_id;
    }
    return $info['view']($content, $annotation);
  }
  watchdog('annotation', 'Missing view function for annotation content type %type', array('%type' => $annotation->content_type),  WATCHDOG_ERROR, $_GET['q']);
  return FALSE;
}