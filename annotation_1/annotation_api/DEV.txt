
SCOPE:
element that is annotated

scopeTYPE     node
scopeID       nid

ANNOTATION:
type of annotation

annoTYPE      marker
annoVARS      selector|width|height

CONTENT:
element that is the annotation

contentTYPE   user
contentDATA   uid




relation:
  table   node
  field   nid

=> annotation ['scope_']



-----

Implementing annotation form:

0) Settings are set in admin/settings/annotation_api

1) Scope is entered
2) Retrieve every setting that fits the scope
  2.1)
  api func: fit_scope
  by (scope type) AND (scope_fit function)
  scope_fit function can use the additional settings
  2.2)
  fit_annotation
  by (annotation type) AND (annotation_fit function)
  2.3)
  fit_content
  by (content type) AND (content_fit function)
  ** fit functions may check access, concrete IDs (user, node, roles, ...), etc.
3) Show form with default settings
  api func: {type}_default


ANNOTATION OBJECT
-----------------
<< annotation_load / annotation_build_default <<
i   aid
i   uid
i   timestamp
s   type
s   vars
s   scope_type
i   scope_id
s   content_type
i   content_id
b   (is_new)
b   (default_built)
<< annotation_build_default / _load -->  annotation_api_info() <<
a   info
  a   scope
    s   title
    a   relation
      s   table
      s   field
      s   help
P    s   (settings form)
P    s   (fit)                   annotation, display (view OR form)
P    s   (default)
    s   (load)
    s   view
    s   (link)  // title callback for adminstration areas, like delete admin
  a   annotation
    s   title
P    s   (settings form)
P    s   (fit)
P    s   (default)
    s   (view)
  a   content
    s   title
    a   relation
      s   table
      s   field
      s   help
P    s   (settings form)
P    s   (fit)
P    s   (default)
    s   (load)
    s   view
    s   form
<< ----------------------- <<

P = POSTPONED => see group_and_settings.inc
vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

// not predefined, will be used by module handlers to control differentiated behaviour
a   settings
    a   (scope)
      [defined by modules]
    a   (annotation)
      [defined by modules]
    a   (content)
      [defined by modules]
<< ----------------------- <<
// objects the current annotation is dealing with
o   scope
o   content
o   (annotation)


At the moment annotation combinations have to be managed by an extra module. In
future development, there could be a settings functionality, that can create
annotation types in the adminstration area.


alternate for future settings.module
// ANNOTATION PROCEDURES

// SHOW existing annotations

1) scope is shown
2) scope-module calls annotation_view_all($scope_type, $scope_id, $scope_object = NULL)
3) Load all annotations of this object
4) run fit test for annotation objects
5) output each passed annotation via annotation_view