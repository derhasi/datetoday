<?php

/**
 * @file
 * An annotation module.
 *
 * @see README.txt
 */


/**
 * Implementation of hook_annotation_info().
 */
function annotation_user_annotation_info() {
  return array(
    'content' => array(
      'user' => array(
        'title' => t('User'),
        'help' => t('Provides users as content for an annotation.'),
        'relation' => array(
          'table' => 'users',
          'field' => 'uid',
        ),
        'load' => 'user_load',
        'view' => 'annotation_user_view',
        'form' => 'annotation_user_form',
      ),
    ),
  );
}

/**
 * View node content in annotation.
 */
function annotation_user_view($auser, $annotation) {
  return theme('annotation_user', $auser, $annotation);
}

function annotation_user_theme() {
  return array(
    'annotation_user' => array(
      'arguments' => array('annotation_user' => NULL, 'annotation' => NULL),
      'template' => 'annotation_user',
    ),
  );
}

function template_preprocess_annotation_user($vars) {
  // here can come some preprocessing....

  $annotator = user_load($vars['annotation']->uid);
  $vars['annotator'] = $annotator;
  $vars['annotator_name'] = $annotator->name;
  $vars['annotator_link'] = l($annotator->name, 'user/'. $annotator->uid);
  $vars['annotation_date'] = format_date($vars['annotation']->timestamp, 'medium');
  $vars['content_name'] = $vars['annotation_user']->name;
  $vars['content_link'] = l($vars['annotation_user']->name, 'user/'. $vars['annotation_user']->uid);
  $vars['annotated_by'] = t('annotated by !annotator', array('!annotator' => $vars['annotator_link']));

}

/**
 * Subform for annotation form.
 */
function annotation_user_form(&$form_state, $annotation) {
  return array(
    '#type' => 'select',
    '#options' => _annotation_user_options(),
    //'#title' => t('User'),
  );
}

/**
 * Builds the options array for user selection.
 */
function _annotation_user_options() {
  $res =  db_query("SELECT uid, name FROM {users}");
  $ops = array();
  while ($obj = db_fetch_object($res)) {
    $ops[$obj->uid] = $obj->name;
  }
  unset($ops[0]);
  return $ops;
}