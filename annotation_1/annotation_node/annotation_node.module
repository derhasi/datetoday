<?php

/**
 * @file
 * An annotation module.
 *
 * @see README.txt
 */

/**
 * Implementation of hook_perm().
 */
function annotation_node_perm() {
  return array('add annotation to nodes', 'view annotations to nodes');
}

/**
 * Implemenatation of hook_nodeapi().
 *
 * Loads and views annotation for nodes.
 */
function annotation_node_nodeapi(&$node, $op, $teaser = NULL, $page = NULL) {
  if ($op == 'view' && !$teaser) {
    // View mode is still TODO, with some additional configuration settings

    // View existing node annotations.
    // TODO: replace with API defined or module defined access control
    /**if (user_access('view annotations to nodes')) {
      if (isset($node->annotation)) {
        foreach ($node->annotation as $annotation) {
          $node->content['annotation'][] = array(
            '#value' => annotation_view($annotation),
          );
        }
      }
    }
    // TODO: replace with API defined or module defined access control
    if (user_access('add annotation to nodes')) {
      // Add ability to add new annotation.
      $new = (object) array(
        'new' => TRUE,
        'scope_type' => 'node',
        'scope_id' => $node->nid,
      );
      $node->content['annotation_add'] = annotation_form_default($new);
    }*/
  }
  elseif ($op == 'load') {
    $annotations = annotation_load(array('scope_type' => 'node', 'scope_id' => $node->nid));
    if (count($annotations)) {
      $node->annotation = $annotations;
    }
  }
}


/**
 * Implementation of hook_annotation_info().
 */
function annotation_node_annotation_info() {
  return array(
    'scope' => array(
      'node' => array(
        'title' => t('Node'),
        'help' => t('Provides nodes as scope for an annotation.'),
        'relation' => array(
          'table' => 'node',
          'field' => 'nid',
        ),
      ),
    ),
    'content' => array(
      'node' => array(
        'title' => t('Node'),
        'help' => t('Provides nodes as content for an annotation.'),
        'relation' => array(
          'table' => 'node',
          'field' => 'nid',
        ),
        'load' => 'node_load',
        'view' => 'annotation_node_view',
        'form' => 'annotation_node_form',
        'settings_form' => 'annotation_node_settings_form_content',
      ),
    ),
  );
}

/**
 * View node content in annotation.
 */
function annotation_node_view($node, $annotation) {
  return theme('annotation_node', $node);
}

function annotation_node_theme() {
  return array(
    'annotation_node' => array(
      'arguments' => array('node' => NULL),
      'template' => 'annotation_node',
    ),
  );
}

/**
 * Subform for annotation form.
 */
function annotation_node_form(&$form_state, $annotation) {
  return array(
    '#type' => 'select',
    '#options' => _annotation_node_options(),
    '#title' => t('Node'),
  );
}

/**
 * retrieve options for node selection. - method 1.
 */
function _annotation_node_options() {
  $res =  db_query("SELECT nid, title FROM {node}");
  $ops = array();
  while ($obj = db_fetch_object($res)) {
    $ops[$obj->nid] = $obj->title;
  }
  return $ops;
}

function annotation_node_settings_form_content() {
  $form = array();
  $form['options'] = array(
    '#type' => 'select',
    '#title' => t('Options type'),
    '#options' => array('_annotation_node_options' => t('Every node')),
  );
  return $form;
}