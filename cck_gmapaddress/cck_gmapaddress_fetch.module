<?php

function cck_gmapaddress_fetch_menu(){
    $content = _content_type_info();
	$items['admin/content/types/%/fields/$fieldname/rebuild'] = array(
                'title' => t('Rebuild GMap Address Fetch - @type - @field',array('@type'=>$type,'@field'=>$fieldname)),
                'page callback' => 'drupal_get_form',
                'page arguments' => array('_cck_gmapaddress_fetch_rebuild',$type,$fieldname),
                'access arguments' => array('administer site configuration'),
                'type' => MENU_LOCAL_TASK,
    	        );
  return $items;
}


/**
 * Implementation of cck hook_widget_info
 */
function cck_gmapaddress_fetch_widget_info() {
  return array(
    'gmapaddress_fetch' => array(
      'label' => t('GMap Address - Fetch Data'),
      'field types' => array('cck_gmapaddress'),
      'multiple values' => CONTENT_HANDLE_CORE,
    ),
  );
}

/**
 * Implementation of cck hook_widget_settings()
 */
function cck_gmapaddress_fetch_widget_settings($op, $widget){
	// $ops save,callbacks,validate get $field instead of $widget
	switch ($op) {
		case 'form':
		  $form = array();
		  $form['fetch_data'] = array(
	        '#type' => 'textfield',
	        '#title' => t('Fetch Data'),
	        '#description' => t("type in some fetch data string"),
	        '#default_value' => ($widget['fetch_data'])?$widget['fetch_data']:'',
			'#required'=>TRUE,
		  );
		  $form['rebuild']= array('#value'=>l(t("Rebuild the GMap Address Data"),$_GET['q']."/rebuild"));
		  return $form;
		case 'validate':
		  break;
		case 'callbacks':
		  return array(
			'default value' => CONTENT_CALLBACK_NONE,
		  );
		case 'save':
		  return array('fetch_data');
	}
}

/**
 * hook_widget()
 */
function cck_gmapaddress_fetch_widget($op, &$node, $field, &$node_field) {
  switch ($op) {
    case 'prepare form values':
      break;
    case 'form':
      $form = array();
		//This widget does not need any form
      return $form;  
    case 'process form values':
	  $node_field[0]['address'] = _cck_gmapaddress_fetch_object($field['widget']['fetch_data'],$node);
	  if (!$field['required'] && $node_field[0]['address'] == ''){unset($node_field[0]);}
	  foreach ($node_field as $key => $item){
		if ($item['address']){
			$gc = gmap_geocode($item['address'],$field['tld']);
			$node_field[$key] = array_merge($item,$gc);	
		}
	  }
	  $node_field = array_values($node_field);
	  if (empty($node_field)){$node_field=array(0=>array());}
      break;
  }
}

function _cck_gmapaddress_fetch_rebuild($nodetype,$fieldname){
		$form = array();
		$field = content_fields($fieldname,$nodetype);
		if ($field['widget']['type']='gmapaddress_fetch'){
			$form['text']=array('#value'=>t("Create data for this GMap Address Fetch Field in existing nodes."));
			$form['last_node_id'] = array(
				'#type'=>'textfield',
				'#title'=>t('Last Node ID updated'),
				'#default_value'=>variable_get("cck_gmapaddress_fetch_last_nid-$nodetype-$fieldname",0),
				'#description'=>t("Any node-ID greater than this number will be updated, within the %maxnodes",array('%maxnodes'=>t('Maximum count of Nodes to update'))),
			);
			$form['max_nodes'] = array(
				'#type'=>'textfield',
				'#title'=>t('Maximum count of Nodes to update'),
				'#default_value'=>variable_get("cck_gmapaddress_fetch_max_nodes-$nodetype-$fieldname",10),
				'#description'=>t("Amount of nodes to update in the process"),
			);
			$form['nodetype'] = array('#type' => 'hidden', '#value' => $nodetype);
			$form['fieldname'] = array('#type' => 'hidden', '#value' => $fieldname);
			$form['submit'] = array(
			  '#type' => 'submit',
			  '#value' => t('Process'),
			);
			$form['backlink']=array('#value'=>l(t('Go back to field settings'),"admin/content/types/$nodetype/fields/$fieldname"));
		} else {
			$form = "only for gmapaddress_fetch";
		}
		return $form;
}

function _cck_gmapaddress_fetch_rebuild_submit($form_id,$form_values){
	$last_node_id = $form_values['last_node_id'];
	$max_nodes = $form_values['max_nodes'];
	$nodetype = $form_values['nodetype'];
	$fieldname = $form_values['fieldname'];
	$field = content_fields($fieldname,$nodetype);
	//print_r($field);
	$res = db_query("SELECT nid FROM {node} WHERE nid>%d AND type='%s' ORDER BY nid ASC LIMIT %d",$last_node_id,$nodetype,$max_nodes);
	while($n = db_fetch_object($res)){
		$node = node_load($n->nid);
		//$node = node_submit($node);
		//print_r($node->field_stadt);
		$adr = _cck_gmapaddress_fetch_object($field['widget']['fetch_data'],$node);
		$gc = gmap_geocode($adr,$field['tld']);
		if ($gc['status'] == 610){
				form_set_error('',t('No valid Google Map Key! Set correct key in !link',array('!link'=>l('GMap Admin',base_path().'admin/settings/gmap'))));
				exit;
		} elseif ($gc['status']!= 200){
			drupal_set_message(t("Invalid address - %address.",array('%address'=>$adr,'%node'=>"$node->title (nid:$node->nid)")),'error');
		} else {
			$node_field[0] = array_merge(array('address'=>$adr),$gc);
			//print_r($node_field);
			content_field('update', $node, $field, $node_field,NULL,NULL);
			drupal_set_message("Node ID:$node->nid Title:$node->title updated");
		}
	}
	if ($node->nid){$variable_set("cck_gmapaddress_fetch_last_nid-$nodetype-$fieldname",$node->nid);}
	variable_set("cck_gmapaddress_fetch_max_nodes-$nodetype-$fieldname",$max_nodes);
	cache_clear_all('*', 'cache_content', TRUE);
}