<?php
// $Id$

/**
 * @file
 *   additional formater for date cck fields.
 */

/**
 * Implementation of hook_menu().
 */
function datetoday_menu() {
  $items = array();
  $items['admin/settings/date-time/formats/datetoday'] = array(
    'title' => 'DateToday formats',
    'description' => 'Definition of datetoday formats.',
    'type' => MENU_LOCAL_TASK,
    'file' => 'admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('datetoday_admin_form'),
    'access arguments' => array('administer site configuration'),
    'weight' => 10,
  );
 return $items;
}


/**
 * Definition of datetoday levels.
 */
function datetoday_levels($mode = NULL, $level = NULL) {
  $levels = array(
    'this minute' => array('label' => t('This minute'), 'mode' => 'minutes',  'offset' =>  0, ),
    'last minute' => array('label' => t('Last minute'), 'mode' => 'minutes',  'offset' => -1, ),
    'next minute' => array('label' => t('Next minute'), 'mode' => 'minutes',  'offset' => +1, ),
    'this hour'   => array('label' => t('This hour'),   'mode' => 'hours',    'offset' =>  0, ),
    'last hour'   => array('label' => t('Last hour'),   'mode' => 'hours',    'offset' => -1, ),
    'next hour'   => array('label' => t('Next hour'),   'mode' => 'hours',    'offset' => +1, ),
    'this day'    => array('label' => t('This day'),    'mode' => 'days',     'offset' =>  0, ),
    'last day'    => array('label' => t('Last day'),    'mode' => 'days',     'offset' => -1, ),
    'next day'    => array('label' => t('Next day'),    'mode' => 'days',     'offset' => +1, ),
    'this week'   => array('label' => t('This week'),   'mode' => 'weeks',    'offset' =>  0, ),
    'last week'   => array('label' => t('Last week'),   'mode' => 'weeks',    'offset' => -1, ),
    'next week'   => array('label' => t('Next week'),   'mode' => 'weeks',    'offset' => +1, ),
    'this month'  => array('label' => t('This month'),  'mode' => 'months',   'offset' =>  0, ),
    'last month'  => array('label' => t('Last month'),  'mode' => 'months',   'offset' => -1, ),
    'next month'  => array('label' => t('Next month'),  'mode' => 'months',   'offset' => +1, ),
    'this year'   => array('label' => t('This year'),   'mode' => 'years',    'offset' =>  0, ),
    'last year'   => array('label' => t('Last year'),   'mode' => 'years',    'offset' => -1, ),
    'next year'   => array('label' => t('Next year'),   'mode' => 'years',    'offset' => +1, ),
  );

  // Only return a single level definition
  if (isset($level)) {
    if (isset($mode)) {
      return $levels[$level][$mode];
    }
    else {
      return $levels[$level];
    }
  }

  // Convert to mode
  $return = array();
  foreach ($levels as $id => $level) {
    switch($mode) {
      case 'label':
      case 'mode':
      case 'offset':
        $return[$id] = $level[$mode];
        break;
      default:
        $return[$id] = $level;
    }
  }
  return $return;
}

/**
 * Wrapper function for datetoday settings.
 */
function datetoday_settings($field_name = NULL) {
  static $settings;

  if (!$settings) {
    $default_default = array(
      'default' => array(
        'this day' => array('text' => 'Today - @date', 'format' => 'H:i', ),
        'next day' => array('text' => 'Tomorrow - @date', 'format' => 'H:i'),
        'last day' => array('text' => 'Yesterday - @date', 'format' => 'H:i'),
        'fallback' => array('text' => '@date', 'format' => variable_get('date_format_medium', 'D, m/d/Y - H:i')),
        'levels' => array('this day', 'next day', 'last day'),
      ),
    );

    $settings = variable_get('datetoday', $default_default);

    $content_fields = content_fields();
    // Set default for each non-yet-defined date field
    foreach ($content_fields as $id => $field) {
      if (in_array($field['type'], array('date', 'datestamp', 'datetime'))) {
        if (!isset($settings[$id])) {
          $settings[$id] = $settings['default'];
        }
      }
    }
  }

  if (isset($field_name)) return $settings[$field_name];
  return $settings;
}

/**
 * Implemenatation of hook_field_formatter_info().
 *
 * Provides an additional formater for date fields.
 */
function datetoday_field_formatter_info() {
  $formatters = array(
    'datetoday' => array(
      'label' => t('Date Today'),
      'field types' => array('date', 'datestamp', 'datetime'),
      'multiple values' => CONTENT_HANDLE_CORE,
    ),
  );
  return $formatters;
}

/**
 * Implementation of hook_theme().
 */
function datetoday_theme() {
  return array(
     'datetoday_formatter_datetoday' => array(
      'arguments' => array('element'),
    ),
  );
}

/**
 * Get a datetoday-formatted date.
 *
 * @param $date
 *  date as DateTime Object
 * @param $field
 *  field name of date field settings should be loaded for
 */
function datetoday_format_date($date, $field = 'default') {
  GLOBAL $language;
  static $now;
  // Get the same now for every date in this page call.
  if (!isset($now)) $now = date_now();
  // retrieve the format for the current date
  $settings = datetoday_get_format_settings($field, $date, $now);
  $langcode = $language->language;

  $formatted_date = date_format_date($date, 'custom', $settings['format'], $langcode);
  return t($settings['text'], array('@date' => $formatted_date));
}

/**
 * Fetch the setting variables for a given field and date.
 */
function datetoday_get_format_settings($field_name, $date, $now = NULL) {
  if (!isset($now)) $now = date_now();

  $set = datetoday_settings($field_name);
  $levels = datetoday_levels();

  // date in future?
  $sign = (date_format($now, DATE_FORMAT_DATETIME) > date_format($date, DATE_FORMAT_DATETIME)) * 2 - 1;
  foreach ($levels as $level => $spec) {
    if ($set['levels'][$level]) {
      $mode = $spec['mode'];
      $offset = $spec['offset'];
      $diff = $sign * date_difference($date, $now, $mode);
      if ((round($diff) + $offset) == 0) {
        return $set[$level];
      }
    }
  }
  if (!is_array($set['fallback'])) {
    return array('text' => '', 'format' => '');
  }
  return $set['fallback'];
}

/**
 * Formatter theming function for datetoday.
 */
function theme_datetoday_formatter_datetoday($element) {
  $field_name = $element['#field_name'];
  // use date.module's formatter process
  $date_process = date_formatter_process($element);
  $date_object = $date_process['value']['local']['object'];
  return datetoday_format_date($date_object, $field_name);
}
