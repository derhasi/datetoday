<?php


/**
 * Implementation of hook_annotation_info().
 */
function annotation_marker_annotation_info($type) {
  $info = array();
  switch ($type) {
    case 'annotation':
      $info['point'] = array(
        'title' => t('Point'),
        'view' => 'annotation_point',
      );
      break;
  }
  return $info;
}

function annotation_marker_menu() {
  return array(
    'test_annotation_marker' => array(
      'title' => 'Text Annotation Marker',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('test_annotation_marker_form'),
      'access arguments' => array('access content'),
      'file' => 'form.inc',
    ),
  );
}

/**
 * Implementation of hook_theme().
 */
function annotation_marker_theme() {
  return array(
    'annotation_marker' => array(
      'arguments' => array('element' => NULL),
    ),
    'annotation_toggle' => array(
      'arguments' => array('selector', 'contents'),
    ),
  );
}

/**
 * Implementation of hook_elements().
 *
 * * annotation marker
 *     a single marker - it's definied by the position (top, left) in a certain
 *     container. The container will be identified by the #container selector
 *     If #input is set to true, dragging and resizing information will be
 *     written in an appended 'annotation input' element (specified above)
 * * annotation input
 *     hidden fields for varying marker variables
 *     this will be used in most cases to store data of draggable or resizable
 *     markers
 * * annotation markerset
 *     several markers grouped to one set (in most cases the child elements are
 *     assigned to the same container)
 *
 */
function annotation_marker_elements() {
  $type['annotation_marker'] = array(
    '#draggable' => FALSE,
    '#resizable' => FALSE,
    '#input' => FALSE, // may be changed to TRUE
    //'#visible' => TRUE,
    //'#hideable' => TRUE,

    //'#position' => array('0px', '0px'),
    //'#size' => array(0, 0),
    //'#container selector' => '#annotation-container',
    //'#container size' => array(0, 0),
    '#default_value' => array(
      'container selector' => '#annotation-container',
      'posx' => '0px',
      'posy' => '0px',
      // 'width' => '10px',
      // 'height' => '10px',
      // 'container width' => '10px',
      // 'container height' => '10px',
    ),
    '#after_build' => array('annotation_marker_afterbuild'),
    '#element_validate' => array('annotation_marker_validate'),
    '#process' => array('annotation_marker_process'), // will only be called for #input == TRUE
  );
  $type['annotation_markerset'] = array(
    '#input' => FALSE, // may be changed to TRUE
    '#process' => array('annotation_markerset_process'),
    '#element_validate' => array('annotation_markerset_validate'),
  );
  return $type;
}

/**
 * Default theming function for annotation marker.
 */
function theme_annotation_marker($element) {
  // Get values for marker - priority on #value
  $values = ($element['#value']) ? $element['#value'] : $element['#default_value'];

  // Only allow elements with container selector
  if (!$values['container selector']) return FALSE;

  $relvars = array (
    $values['container selector'], $values['posx'], $values['posy'],
    $values['container width'], $values['container height'], $values['width'], $values['height'],
  );

  // Add id
  $element['#attributes']['id'] = $element['#id'];

  // Draggable
  if ($element['#draggable'] == TRUE) {
    $element['#attributes']['class'] .= ' draggable';
  }
  // Resizable
  if ($element['#resizable'] == TRUE) {
    $element['#attributes']['class'] .= ' resizable';
  }

  $relvars = implode('|', $relvars);
  $element['#attributes']['rel'] = "annotation-marker[$relvars]";
  //$element['#attributes']['class'][] = "annotation-marker[$relvars]";

  drupal_add_css(drupal_get_path('module','annotation_marker'). '/annotation_marker.css', 'module');
  //drupal_add_js(drupal_get_path('module','annotation_marker'). '/annotation_marker.js', 'module');
dpm($element);
  return '<div'. drupal_attributes($element['#attributes']) .'>'. ($element['#title'] ? '<label>'. $element['#title'] .'</label>' : '') . (isset($element['#description']) && $element['#description'] ? '<div class="description">'. $element['#description'] .'</div>' : '') . (!empty($element['#children']) ? $element['#children'] : '') . "</div>\n";
}


/**
 * Expands an inputable marker with annotation-input element.
 */
function annotation_marker_process($element) {
  $columns = array( 'posx', 'posy', 'height', 'width',
                    'container selector', 'container width', 'container height'
                   );
  $element['#attributes']['class'] .= ' input';
  $element['#tree'] = TRUE;
  foreach ($columns as $key) {
    $element[$key] = array('#type' => 'hidden', '#processed' => TRUE, '#default_value' => $element['#default_value'][$key]);
  }
  return $element;
}

/**
 * Adds necessary js files.
 */
function annotation_marker_afterbuild($element) {
  if ($element['#draggable'] == TRUE) {
    jquery_ui_add(array('ui.draggable'));
  }
  if ($element['#resizable'] == TRUE) {
    jquery_ui_add(array('ui.resizable'));
  }
  drupal_add_css(drupal_get_path('module','annotation_marker'). '/annotation_marker.css', 'module');
  drupal_add_js(drupal_get_path('module','annotation_marker'). '/annotation_marker.js', 'module');
  return $element;
}

function annotation_marker_validate($element, &$form_state) {

}

function annotation_markerset_process($element) {
  return $element;
}

/**
 * Item to toggle visibility of contents.
 */
function theme_annotation_toggle($selector, $contents = 'Toggle', $contents_toogle = 'Toggle Back') {
  drupal_add_js(drupal_get_path('module','annotation_marker'). '/annotation_marker.js', 'module');
  return "<span class=\"annotation-toggle\" rel=\"$selector|$contents_toogle\">$contents</span>";
}
