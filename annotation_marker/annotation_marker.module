<?php


function annotation_marker_menu() {
  return array(
    'test_annotation_marker' => array(
      'title' => 'Text Annotation Marker',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('test_annotation_marker_form'),
      'access arguments' => array('access content'),
      'file' => 'form.inc',
    )
  );
}

/**
 * Implementation of hook_theme().
 */
function annotation_marker_theme() {
  return array(
    'annotation_marker' => array(
      'arguments' => array('element' => NULL),
    ),
  );
}

/**
 * Implementation of hook_elements().
 *
 * * annotation marker
 *     a single marker - it's definied by the position (top, left) in a certain
 *     container. The container will be identified by the #selector
 *     If #input is set to true, dragging and resizing information will be
 *     written in an appended 'annotation input' element (specified above)
 * * annotation input
 *     hidden fields for varying marker variables
 *     this will be used in most cases to store data of draggable or resizable
 *     markers
 * * annotation markerset
 *     several markers grouped to one set (in most cases the child elements are
 *     assigned to the same container)
 *
 */
function annotation_marker_elements() {
  $type['annotation_marker'] = array(
    '#draggable' => FALSE,
    '#resizable' => FALSE,
    '#input' => FALSE, // may be changed to TRUE
    //'#visible' => TRUE,
    //'#hideable' => TRUE,
    '#position' => array('0px', '0px'),
    '#size' => array(0, 0),
    '#conatiner selector' => '#annotation-container',
    '#container size' => array(0, 0),
    '#after_build' => array('annotation_marker_afterbuild'),
    '#element_validate' => array('annotation_marker_validate'),
    '#process' => array('annotation_marker_process'), // will only be called for #input == TRUE
  );
  $type['annotation_input'] = array(
    '#input' => TRUE,
    '#process' => array('annotation_input_process'),
    '#element_validate' => array('annotation_input_validate'),
  );
  $type['annotation_markerset'] = array(
    '#input' => FALSE, // may be changed to TRUE
    '#process' => array('annotation_markerset_process'),
    '#element_validate' => array('annotation_markerset_validate'),
  );
  return $type;
}

/**
 * Default theming function for annotation marker.
 */
function theme_annotation_marker($element) {
//  dpm($element);
  // Change rel attrib to work as trigger for annotation.
  $relvars = array($element['#selector']);
  $relvars += (is_array($element['#position']) && count($element['#position']) == 2) ? $element['#position'] : array('0px', '0px');
  $relvars += (is_array($element['#container_size']) && count($element['#container_size']) == 2) ? $element['#container_size'] : array(0, 0);
  $relvars += (is_array($element['#size']) && count($element['#size']) == 2) ? $element['#size'] : array(0, 0);

  // Draggable
  if ($element['#draggable'] == TRUE) {
    //jquery_ui_add(array('ui.draggable'));
    if (!isset($elements['#atributes']['class'])) {
      $elements['#atributes']['class'] = array('draggable');
    }
    elseif(!is_array($elements['#atributes']['class'])) {
      $elements['#atributes']['class'] = array($elements['#atributes']['class'], 'draggable');
    }
    else {
      $elements['#atributes']['class'][] = 'draggable';
    }
  }
  // Resizable
  if ($element['#resizable'] == TRUE) {
    //jquery_ui_add(array('ui.resizable'));
    if (!isset($elements['#atributes']['class'])) {
      $elements['#atributes']['class'] = array('draggable');
    }
    elseif(!is_array($elements['#atributes']['class'])) {
      $elements['#atributes']['class'] = array($elements['#atributes']['class'], 'draggable');
    }
    else {
      $elements['#atributes']['class'][] = 'draggable';
    }
  }

  $relvars = implode('|', $relvars);
  $element['#attributes']['rel'] = "annomark[$relvars]";

  drupal_add_css(drupal_get_path('module','annotation_marker'). '/annotation_marker.css', 'module');
  //drupal_add_js(drupal_get_path('module','annotation_marker'). '/annotation_marker.js', 'module');

  return '<div'. drupal_attributes($element['#attributes']) .'>'. ($element['#title'] ? '<label>'. $element['#title'] .'</label>' : '') . (isset($element['#description']) && $element['#description'] ? '<div class="description">'. $element['#description'] .'</div>' : '') . (!empty($element['#children']) ? $element['#children'] : '') . (isset($element['#value']) ? $element['#value'] : '') ."Baum</div>\n";
}

function annotation_input_process($element) {
  $columns = array( 'posx', 'posy', 'height', 'width',
                   'container selector', 'container width', 'container height'
                   );
  $element['#tree'] = TRUE;
  foreach ($columns as $key) {
    $element[$key] = array('#type' => 'hidden', '#processed' => TRUE, '#default_value' => $element['#default_value'][$key]);
  }
  return $element;
}


function theme_annotation_input($element) {
  $class = 'form-annotation-input';
  if (isset($element['#attributes']['class'])) {
    $class .= ' '. $element['#attributes']['class'];
  }
  $element['#children'] = '<div class="'. $class .'">'. (!empty($element['#children']) ? $element['#children'] : '') .'</div>';
  if ($element['#title'] || $element['#description']) {
    unset($element['#id']);
    return theme('form_element', $element, $element['#children']);
  }
  else {
    return $element['#children'];
  }
}

/**
 * TODO:!!!!!
 */
function annotation_marker_process($element) {
print('process');
  dpm($element);
  return $element;

  return $element;
}

/**
 * 
 */
function  annotation_marker_afterbuild($element) {
  dpm($element);
  if ($element['#draggable'] == TRUE) {
    jquery_ui_add(array('ui.draggable'));
  }
  if ($element['#resizable'] == TRUE) {
    jquery_ui_add(array('ui.resizable'));
  }
  drupal_add_css(drupal_get_path('module','annotation_marker'). '/annotation_marker.css', 'module');
  drupal_add_js(drupal_get_path('module','annotation_marker'). '/annotation_marker.js', 'module');
  return $element;
}

function annotation_markerset_process($element) {
  return $element;
}

function annotation_marker_validate($element, &$form_state) {

}